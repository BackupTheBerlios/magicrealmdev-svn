#pragma once 

#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <mscorlib.dll>

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 
namespace XmlData {
    using namespace System;
    using namespace System::Data;
    using namespace System::Xml;
    using namespace System::Runtime::Serialization;
    
    using namespace System;
    public __gc class CharacterSpecialAdvantages;
    
    
    [Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(S"code"), 
    System::Diagnostics::DebuggerStepThrough, 
    System::ComponentModel::ToolboxItem(true)]
    public __gc class CharacterSpecialAdvantages : public System::Data::DataSet {
        public : __gc class CharacterSpecialAdvantageDataTable;
        public : __gc class CharacterSpecialAdvantageRow;
        public : __gc class CharacterSpecialAdvantageRowChangeEvent;
        
        private: XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  tableCharacterSpecialAdvantage;
        
        public: CharacterSpecialAdvantages();
        protected: CharacterSpecialAdvantages(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context);
        public: [property: System::ComponentModel::Browsable(false), 
        property: System::ComponentModel::DesignerSerializationVisibilityAttribute(System::ComponentModel::DesignerSerializationVisibility::Content)]
         __property XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  get_CharacterSpecialAdvantage();
        
        public: virtual System::Data::DataSet *  Clone();
        
        protected: virtual System::Boolean ShouldSerializeTables();
        
        protected: virtual System::Boolean ShouldSerializeRelations();
        
        protected: virtual System::Void ReadXmlSerializable(System::Xml::XmlReader *  reader);
        
        protected: virtual System::Xml::Schema::XmlSchema *  GetSchemaSerializable();
        
        public private: System::Void InitVars();
        
        private: System::Void InitClass();
        
        private: System::Boolean ShouldSerializeCharacterSpecialAdvantage();
        
        private: System::Void SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e);
        
        public: __delegate System::Void CharacterSpecialAdvantageRowChangeEventHandler(System::Object *  sender, XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent *  e);
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CharacterSpecialAdvantageDataTable : public System::Data::DataTable, public System::Collections::IEnumerable {
            
            private: System::Data::DataColumn *  columnName;
            
            private: System::Data::DataColumn *  columnEffect;
            
            private: System::Data::DataColumn *  columnDescription;
            
            public private: CharacterSpecialAdvantageDataTable();
            public private: CharacterSpecialAdvantageDataTable(System::Data::DataTable *  table);
            public: [property: System::ComponentModel::Browsable(false)]
             __property System::Int32 get_Count();
            
            public private:  __property System::Data::DataColumn *  get_NameColumn();
            
            public private:  __property System::Data::DataColumn *  get_EffectColumn();
            
            public private:  __property System::Data::DataColumn *  get_DescriptionColumn();
            
            public:  __property XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  get_Item(System::Int32 index);
            
            public: __event XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEventHandler *  CharacterSpecialAdvantageRowChanged;
            
            public: __event XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEventHandler *  CharacterSpecialAdvantageRowChanging;
            
            public: __event XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEventHandler *  CharacterSpecialAdvantageRowDeleted;
            
            public: __event XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEventHandler *  CharacterSpecialAdvantageRowDeleting;
            
            public: System::Void AddCharacterSpecialAdvantageRow(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row);
            
            public: XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  AddCharacterSpecialAdvantageRow(System::String *  Name, System::String *  Effect, System::String *  Description);
            
            public: System::Collections::IEnumerator *  GetEnumerator();
            
            public: virtual System::Data::DataTable *  Clone();
            
            protected: virtual System::Data::DataTable *  CreateInstance();
            
            public private: System::Void InitVars();
            
            private: System::Void InitClass();
            
            public: XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  NewCharacterSpecialAdvantageRow();
            
            protected: virtual System::Data::DataRow *  NewRowFromBuilder(System::Data::DataRowBuilder *  builder);
            
            protected: virtual System::Type *  GetRowType();
            
            protected: virtual System::Void OnRowChanged(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowChanging(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleted(System::Data::DataRowChangeEventArgs *  e);
            
            protected: virtual System::Void OnRowDeleting(System::Data::DataRowChangeEventArgs *  e);
            
            public: System::Void RemoveCharacterSpecialAdvantageRow(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CharacterSpecialAdvantageRow : public System::Data::DataRow {
            
            private: XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  tableCharacterSpecialAdvantage;
            
            public private: CharacterSpecialAdvantageRow(System::Data::DataRowBuilder *  rb);
            public:  __property System::String *  get_Name();
            public:  __property  void set_Name(System::String *  value);
            
            public:  __property System::String *  get_Effect();
            public:  __property  void set_Effect(System::String *  value);
            
            public:  __property System::String *  get_Description();
            public:  __property  void set_Description(System::String *  value);
        };
        
        public : [System::Diagnostics::DebuggerStepThrough]
        __gc class CharacterSpecialAdvantageRowChangeEvent : public System::EventArgs {
            
            private: XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  eventRow;
            
            private: System::Data::DataRowAction eventAction;
            
            public: CharacterSpecialAdvantageRowChangeEvent(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row, System::Data::DataRowAction action);
            public:  __property XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  get_Row();
            
            public:  __property System::Data::DataRowAction get_Action();
        };
        };
    
    
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantages() {
        this->InitClass();
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantages(System::Runtime::Serialization::SerializationInfo *  info, System::Runtime::Serialization::StreamingContext context) {
        System::String *  strSchema = (__try_cast<System::String *  >(info->GetValue(S"XmlSchema", __typeof(System::String))));
        if ((strSchema != 0)) {
            System::Data::DataSet *  ds = new System::Data::DataSet();
            ds->ReadXmlSchema(new System::Xml::XmlTextReader(new System::IO::StringReader(strSchema)));
            if ((ds->Tables->Item[S"CharacterSpecialAdvantage"] != 0)) {
                this->Tables->Add(new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable(ds->Tables->Item[S"CharacterSpecialAdvantage"]));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->InitClass();
        }
        this->GetSerializationData(info, context);
        System::ComponentModel::CollectionChangeEventHandler *  schemaChangedHandler = new System::ComponentModel::CollectionChangeEventHandler(this, SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  CharacterSpecialAdvantages::get_CharacterSpecialAdvantage() {
        return this->tableCharacterSpecialAdvantage;
    }
    
    inline System::Data::DataSet *  CharacterSpecialAdvantages::Clone() {
        XmlData::CharacterSpecialAdvantages *  cln = (__try_cast<XmlData::CharacterSpecialAdvantages *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Boolean CharacterSpecialAdvantages::ShouldSerializeTables() {
        return false;
    };
    
    inline System::Boolean CharacterSpecialAdvantages::ShouldSerializeRelations() {
        return false;
    };
    
    inline System::Void CharacterSpecialAdvantages::ReadXmlSerializable(System::Xml::XmlReader *  reader) {
        this->Reset();
        System::Data::DataSet *  ds = new System::Data::DataSet();
        ds->ReadXml(reader);
        if ((ds->Tables->Item[S"CharacterSpecialAdvantage"] != 0)) {
            this->Tables->Add(new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable(ds->Tables->Item[S"CharacterSpecialAdvantage"]));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, System::Data::MissingSchemaAction::Add);
        this->InitVars();
    };
    
    inline System::Xml::Schema::XmlSchema *  CharacterSpecialAdvantages::GetSchemaSerializable() {
        System::IO::MemoryStream *  stream = new System::IO::MemoryStream();
        this->WriteXmlSchema(new System::Xml::XmlTextWriter(stream, 0));
        stream->Position = 0;
        return System::Xml::Schema::XmlSchema::Read(new System::Xml::XmlTextReader(stream), 0);
    };
    
    inline System::Void CharacterSpecialAdvantages::InitVars() {
        this->tableCharacterSpecialAdvantage = (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  >(this->Tables->Item[S"CharacterSpecialAdvantage"]));
        if ((this->tableCharacterSpecialAdvantage != 0)) {
            this->tableCharacterSpecialAdvantage->InitVars();
        }
    };
    
    inline System::Void CharacterSpecialAdvantages::InitClass() {
        this->DataSetName = S"CharacterSpecialAdvantages";
        this->Prefix = S"";
        this->Namespace = S"";
        this->Locale = new System::Globalization::CultureInfo(S"en-US");
        this->CaseSensitive = false;
        this->EnforceConstraints = true;
        this->tableCharacterSpecialAdvantage = new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable();
        this->Tables->Add(this->tableCharacterSpecialAdvantage);
    };
    
    inline System::Boolean CharacterSpecialAdvantages::ShouldSerializeCharacterSpecialAdvantage() {
        return false;
    };
    
    inline System::Void CharacterSpecialAdvantages::SchemaChanged(System::Object *  sender, System::ComponentModel::CollectionChangeEventArgs *  e) {
        if ((e->Action == System::ComponentModel::CollectionChangeAction::Remove)) {
            this->InitVars();
        }
    };
    
    
    
    
    
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::CharacterSpecialAdvantageDataTable() : 
            DataTable(S"CharacterSpecialAdvantage") {
        this->InitClass();
    }
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::CharacterSpecialAdvantageDataTable(System::Data::DataTable *  table) : 
            DataTable(table->TableName) {
        if ((table->CaseSensitive != table->DataSet->CaseSensitive)) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if ((table->Locale->ToString() != table->DataSet->Locale->ToString())) {
            this->Locale = table->Locale;
        }
        if ((table->Namespace != table->DataSet->Namespace)) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
        this->DisplayExpression = table->DisplayExpression;
    }
    
    inline System::Int32 CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::get_Count() {
        return this->Rows->Count;
    }
    
    inline System::Data::DataColumn *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::get_NameColumn() {
        return this->columnName;
    }
    
    inline System::Data::DataColumn *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::get_EffectColumn() {
        return this->columnEffect;
    }
    
    inline System::Data::DataColumn *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::get_DescriptionColumn() {
        return this->columnDescription;
    }
    
    inline XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::get_Item(System::Int32 index) {
        return (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(this->Rows->Item[index]));
    }
    
    
    
    
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::AddCharacterSpecialAdvantageRow(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row) {
        this->Rows->Add(row);
    };
    
    inline XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::AddCharacterSpecialAdvantageRow(System::String *  Name, System::String *  Effect, System::String *  Description) {
        XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  rowCharacterSpecialAdvantageRow = (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(this->NewRow()));
        System::Object* __mcTemp__1[] = new System::Object*[3];
                __mcTemp__1[0] = Name;
                __mcTemp__1[1] = Effect;
                __mcTemp__1[2] = Description;
        rowCharacterSpecialAdvantageRow->ItemArray = __mcTemp__1;
        this->Rows->Add(rowCharacterSpecialAdvantageRow);
        return rowCharacterSpecialAdvantageRow;
    };
    
    inline System::Collections::IEnumerator *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    };
    
    inline System::Data::DataTable *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::Clone() {
        XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  cln = (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  >(__super::Clone()));
        cln->InitVars();
        return cln;
    };
    
    inline System::Data::DataTable *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::CreateInstance() {
        return new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable();
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::InitVars() {
        this->columnName = this->Columns->Item[S"Name"];
        this->columnEffect = this->Columns->Item[S"Effect"];
        this->columnDescription = this->Columns->Item[S"Description"];
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::InitClass() {
        this->columnName = new System::Data::DataColumn(S"Name", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnName);
        this->columnEffect = new System::Data::DataColumn(S"Effect", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnEffect);
        this->columnDescription = new System::Data::DataColumn(S"Description", __typeof(System::String), 0, System::Data::MappingType::Element);
        this->Columns->Add(this->columnDescription);
        this->columnName->AllowDBNull = false;
        this->columnEffect->AllowDBNull = false;
        this->columnDescription->AllowDBNull = false;
    };
    
    inline XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::NewCharacterSpecialAdvantageRow() {
        return (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(this->NewRow()));
    };
    
    inline System::Data::DataRow *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::NewRowFromBuilder(System::Data::DataRowBuilder *  builder) {
        return new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow(builder);
    };
    
    inline System::Type *  CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::GetRowType() {
        return __typeof(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow);
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::OnRowChanged(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanged(e);
        if ((this->CharacterSpecialAdvantageRowChanged != 0)) {
            this->CharacterSpecialAdvantageRowChanged(this, new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent((__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::OnRowChanging(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowChanging(e);
        if ((this->CharacterSpecialAdvantageRowChanging != 0)) {
            this->CharacterSpecialAdvantageRowChanging(this, new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent((__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::OnRowDeleted(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleted(e);
        if ((this->CharacterSpecialAdvantageRowDeleted != 0)) {
            this->CharacterSpecialAdvantageRowDeleted(this, new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent((__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::OnRowDeleting(System::Data::DataRowChangeEventArgs *  e) {
        __super::OnRowDeleting(e);
        if ((this->CharacterSpecialAdvantageRowDeleting != 0)) {
            this->CharacterSpecialAdvantageRowDeleting(this, new XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent((__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  >(e->Row)), e->Action));
        }
    };
    
    inline System::Void CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable::RemoveCharacterSpecialAdvantageRow(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row) {
        this->Rows->Remove(row);
    };
    
    
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::CharacterSpecialAdvantageRow(System::Data::DataRowBuilder *  rb) : 
            DataRow(rb) {
        this->tableCharacterSpecialAdvantage = (__try_cast<XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageDataTable *  >(this->Table));
    }
    
    inline System::String *  CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::get_Name() {
        return (__try_cast<System::String *  >(this->Item[this->tableCharacterSpecialAdvantage->NameColumn]));
    }
    inline void CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::set_Name(System::String *  value) {
        this->Item[this->tableCharacterSpecialAdvantage->NameColumn] = value;
    }
    
    inline System::String *  CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::get_Effect() {
        return (__try_cast<System::String *  >(this->Item[this->tableCharacterSpecialAdvantage->EffectColumn]));
    }
    inline void CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::set_Effect(System::String *  value) {
        this->Item[this->tableCharacterSpecialAdvantage->EffectColumn] = value;
    }
    
    inline System::String *  CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::get_Description() {
        return (__try_cast<System::String *  >(this->Item[this->tableCharacterSpecialAdvantage->DescriptionColumn]));
    }
    inline void CharacterSpecialAdvantages::CharacterSpecialAdvantageRow::set_Description(System::String *  value) {
        this->Item[this->tableCharacterSpecialAdvantage->DescriptionColumn] = value;
    }
    
    
    
    
    inline CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent::CharacterSpecialAdvantageRowChangeEvent(XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  row, System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline XmlData::CharacterSpecialAdvantages::CharacterSpecialAdvantageRow *  CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent::get_Row() {
        return this->eventRow;
    }
    
    inline System::Data::DataRowAction CharacterSpecialAdvantages::CharacterSpecialAdvantageRowChangeEvent::get_Action() {
        return this->eventAction;
    }
}
